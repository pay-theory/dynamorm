AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: DynamORM E-commerce Example - Lambda Deployment

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Deployment environment

Globals:
  Function:
    Runtime: provided.al2
    Architectures:
      - x86_64
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        TABLE_NAME: !Ref EcommerceTable
        ENABLE_TRACING: "true"
    Tracing: Active

Resources:
  # DynamoDB Table
  EcommerceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ecommerce-${Environment}'
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: gsi1pk
          AttributeType: S
        - AttributeName: gsi1sk
          AttributeType: S
        - AttributeName: gsi2pk
          AttributeType: S
        - AttributeName: gsi2sk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: gsi-1
          KeySchema:
            - AttributeName: gsi1pk
              KeyType: HASH
            - AttributeName: gsi1sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: gsi-2
          KeySchema:
            - AttributeName: gsi2pk
              KeyType: HASH
            - AttributeName: gsi2sk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Application
          Value: DynamORM-Ecommerce
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  EcommerceApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub 'ecommerce-api-${Environment}'
      StageName: !Ref Environment
      TracingEnabled: true
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Customer-ID,X-Admin-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: NONE
        AddDefaultAuthorizerToCorsPreflight: false

  # Lambda Functions
  ProductFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ecommerce-products-${Environment}'
      CodeUri: ../
      Handler: bootstrap
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EcommerceTable
      Events:
        ListProducts:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products
            Method: GET
        GetProduct:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products/{id}
            Method: GET
        GetProductBySKU:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products/sku/{sku}
            Method: GET
        CreateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products
            Method: POST
        UpdateProduct:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products/{id}
            Method: PUT
        SearchProducts:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /products/search
            Method: GET
      Metadata:
        BuildMethod: makefile

  CartFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ecommerce-cart-${Environment}'
      CodeUri: ../
      Handler: bootstrap
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EcommerceTable
      Events:
        CreateCart:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts
            Method: POST
        GetCart:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}
            Method: GET
        GetCartBySession:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/session/{sessionId}
            Method: GET
        UpdateCart:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}
            Method: PUT
        DeleteCart:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}
            Method: DELETE
        AddItem:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}/items
            Method: POST
        UpdateItem:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}/items/{productId}
            Method: PUT
        RemoveItem:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /carts/{id}/items/{productId}
            Method: DELETE
      Metadata:
        BuildMethod: makefile

  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ecommerce-orders-${Environment}'
      CodeUri: ../
      Handler: bootstrap
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EcommerceTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:TransactWriteItems
                - dynamodb:TransactGetItems
              Resource: !GetAtt EcommerceTable.Arn
      Events:
        CreateOrder:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders
            Method: POST
        GetOrder:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders/{id}
            Method: GET
        GetOrderByNumber:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders/number/{orderNumber}
            Method: GET
        ListOrders:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders
            Method: GET
        UpdateOrderStatus:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders/{id}/status
            Method: PUT
        CancelOrder:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /orders/{id}/cancel
            Method: POST
      Metadata:
        BuildMethod: makefile

  InventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'ecommerce-inventory-${Environment}'
      CodeUri: ../
      Handler: bootstrap
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref EcommerceTable
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:TransactWriteItems
              Resource: !GetAtt EcommerceTable.Arn
      Events:
        GetInventory:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/{productId}
            Method: GET
        ListInventory:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory
            Method: GET
        UpdateInventory:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/{productId}
            Method: PUT
        AdjustInventory:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/{productId}/adjust
            Method: POST
        TransferInventory:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/transfer
            Method: POST
        GetMovements:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/{productId}/movements
            Method: GET
        BulkUpdate:
          Type: Api
          Properties:
            RestApiId: !Ref EcommerceApi
            Path: /inventory/bulk-update
            Method: POST
      Metadata:
        BuildMethod: makefile

  # CloudWatch Alarms
  TableThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ecommerce-table-throttle-${Environment}'
      AlarmDescription: DynamoDB table throttling detected
      MetricName: UserErrors
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: TableName
          Value: !Ref EcommerceTable

  FunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'ecommerce-function-errors-${Environment}'
      AlarmDescription: Lambda function errors detected
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${EcommerceApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'
  
  TableName:
    Description: DynamoDB table name
    Value: !Ref EcommerceTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'
  
  TableArn:
    Description: DynamoDB table ARN
    Value: !GetAtt EcommerceTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TableArn' 